#!/bin/bash

if [ $ARCH == "riscv64" ]; then
  CC="riscv64-linux-gnu-gcc-11"
  CXX="riscv64-linux-gnu-g++-11"
  HOST="riscv64-linux-gnu"
  WITH_HOST="--host=riscv64-linux-gnu"
  CC_DEB="gcc-11-riscv64-linux-gnu g++-11-riscv64-linux-gnu"
elif [ $ARCH == "arm" ]; then
  CC="arm-linux-gnueabihf-gcc-11"
  CXX="arm-linux-gnueabihf-g++-11"
  HOST="arm-linux-gnueabihf"
  WITH_HOST="--host=arm-linux-gnueabihf"
  CC_DEB="gcc-11-arm-linux-gnueabihf g++-11-arm-linux-gnueabihf"
elif [ $ARCH == "x86_64" ]; then
  CC="gcc"
  HOST="x86_64-linux-gnu"
  WITH_HOST=
  CC_DEB=
elif [ $ARCH == "i686" ]; then
  CC="gcc -m32"
  CXX="g++ -m32"
  HOST="i686-linux-gnu"
  WITH_HOST=
  CC_DEB="gcc-multilib"
elif [ $ARCH == "mips" ]; then
  CC="mips64el-linux-gnuabi64-gcc-10"
  CXX="mips64el-linux-gnuabi64-g++-10"
  HOST="mips64el-linux-gnuabi64"
  WITH_HOST="--host=mips-linux-gnuabi64"
  CC_DEB="gcc-10-mips64el-linux-gnuabi64"
fi

apt install $CC_DEB
mkdir -p output
for OPT in O0 O3; do
  echo Building for $ARCH-$OPT
  make clean
  CFLAGS="-g -${OPT}"
  if [ -d build_${ARCH}_${OPT} ];then
    rm -r build_${ARCH}_${OPT}
  fi
  mkdir -p build_${ARCH}_${OPT}

  (cd build_${ARCH}_${OPT} && CC=$CC CFLAGS=$CFLAGS cmake -DUSE_SHARED_MBEDTLS_LIBRARY=On ..)
  cmake --build build_${ARCH}_${OPT}

  find  build_${ARCH}_${OPT}/library/ -type f -printf '%f\n' | grep '.*\.so' | while read -r BIN_NAME;do
    cp build_${ARCH}_${OPT}/library/$BIN_NAME /root/cve-output/mbedtls/$MBED_VERSION/$BIN_NAME-$ARCH-gcc-$OPT
  done
done  



